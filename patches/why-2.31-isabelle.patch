Only in why-2.31-patched/bench: bench
Only in why-2.31-patched/bin: gwhy.opt
Only in why-2.31-patched/bin: krakatoa.opt
Only in why-2.31-patched/bin: simplify2why.opt
Only in why-2.31-patched/bin: why-config.opt
Only in why-2.31-patched/: config.log
Only in why-2.31-patched/: config.status
Only in why-2.31/doc: manual.ps
Only in why-2.31-patched/doc: version.tex
Only in why-2.31-patched/lib/coq: Jessie_memory_model.glob
Only in why-2.31-patched/lib/coq: jessie_why.glob
Only in why-2.31-patched/lib/coq: jessie_why.v.bak
Only in why-2.31-patched/lib/coq: WhyArrays.glob
Only in why-2.31-patched/lib/coq: WhyBool.glob
Only in why-2.31-patched/lib/coq: WhyCM.glob
Only in why-2.31-patched/lib/coq: WhyCoqCompat.glob
Only in why-2.31-patched/lib/coq: WhyExn.glob
Only in why-2.31-patched/lib/coq: WhyFloats.glob
Only in why-2.31-patched/lib/coq: WhyFloatsStrict.glob
Only in why-2.31-patched/lib/coq: Why.glob
Only in why-2.31-patched/lib/coq: WhyInt.glob
Only in why-2.31-patched/lib/coq: WhyLemmas.glob
Only in why-2.31-patched/lib/coq: WhyPermut.glob
Only in why-2.31-patched/lib/coq: WhyPrelude.glob
Only in why-2.31-patched/lib/coq: WhyReal.glob
Only in why-2.31-patched/lib/coq: WhySorted.glob
Only in why-2.31-patched/lib/coq: WhyTactics.glob
Only in why-2.31-patched/lib/coq: WhyTuples.glob
Only in why-2.31-patched/: Makefile
Only in why-2.31-patched/mix: mix_parser.output
Only in why-2.31-patched/: regtest.opt
diff -ru why-2.31/src/isabelle.ml why-2.31-patched/src/isabelle.ml
--- why-2.31/src/isabelle.ml	2012-07-20 03:33:10.000000000 +0900
+++ why-2.31-patched/src/isabelle.ml	2013-01-29 10:37:42.942831492 +0900
@@ -41,6 +41,7 @@
 open Cc
 open Pp
 
+
 let is_isabelle_keyword =
   let ht = Hashtbl.create 300  in
   List.iter (fun kw -> Hashtbl.add ht kw ()) 
@@ -148,7 +149,7 @@
   else if id == t_mul_real then "(op *)"
   else if id == t_div_real then "(op /)"
   else if id == t_neg_real then "(%x. - x)"
-  else if id == t_sqrt_real then assert false (* TODO *)
+  else if id == t_sqrt_real then "(%x. sqrt x)" (* TODO *)
   else if id == t_real_of_int then "real"
   else if id == t_int_of_real then assert false (* TODO *)
   else assert false
@@ -302,20 +303,20 @@
 
 let reprint_logic fmt id t =
   fprintf fmt 
-    "@[<hov 4>(*Why logic*) consts %a ::@ @[\"%a\"@]@];@\n" 
+    "@[<hov 4>(*Why logic*) consts %a ::@ @[\"%a\"@]@]@\n" 
     idents id print_logic_type t
 
 let print_logic fmt id t = reprint_logic fmt id t
 
 let reprint_axiom fmt id p =
-  fprintf fmt "@[<hov 4>(*Why axiom*) axioms %a:@ \"%a\";@]@\n" idents id print_predicate_scheme p
+  fprintf fmt "@[<hov 4>(*Why axiom*) axioms %a:@ \"%a\"@]@\n" idents id print_predicate_scheme p
 
 let print_axiom fmt id p = 
   reprint_axiom fmt id p
 
 let reprint_obligation fmt loc _is_lemma _expl id s =
   fprintf fmt "@[(* %a *)@]@\n" (Loc.report_obligation_position ~onlybasename:true) loc;
-  fprintf fmt "@[<hov 4>(*Why goal*) lemma %a:@\n%a;@]@\n" idents id print_sequent s
+  fprintf fmt "@[<hov 4>(*Why goal*) lemma %a:@\n%a@]@\n" idents id print_sequent s
 (*;
   fprintf fmt "@[(* %a *)@]@\n" Util.print_explanation expl
 *)
@@ -331,11 +332,11 @@
   let print_binder fmt (x,_pt) = 
       fprintf fmt "%a" ident x in
   fprintf fmt
-     "@[<hov 2>(*Why predicate*) constdefs %a :: @[\"[@[%a@]] => bool\"@]@]@\n" 
+     "@[<hov 2>(*Why predicate*) definition %a :: @[\"[@[%a@]] => bool\"@]@]@\n" 
     idents id 
     (print_list comma print_binder_type) bl;
   fprintf fmt
-     "@[<hov 2>     \"%a == @[%%@[%a@]. @[%a@]@]\"@];@\n" 
+     "@[<hov 2>     where \"%a == @[%%@[%a@]. @[%a@]@]\"@]@\n" 
     idents id 
     (print_list space print_binder) bl
     print_predicate p 
@@ -348,15 +349,28 @@
       fprintf fmt "%a" print_pure_type pt in
   let print_binder fmt (x,_pt) = 
       fprintf fmt "%a" ident x in
-  fprintf fmt
-     "@[<hov 2>(*Why function*) constdefs %a :: @[\"[%a] => %a\"@]@]@\n" 
-    idents id 
-    (print_list comma print_binder_type) bl print_pure_type t;
-  fprintf fmt
-     "@[<hov 8>    \"%a ==@ %%%a. @[%a@]\"@];@\n" 
-    idents id 
-    (print_list space print_binder) bl
-    print_term e 
+  if (List.length bl > 0) then
+    (
+      fprintf fmt
+	"@[<hov 2>(*Why function*) definition %a :: @[\"[%a] => %a\"@]@]@\n" 
+	idents id 
+	(print_list comma print_binder_type) bl print_pure_type t;
+      fprintf fmt
+	"@[<hov 8>    where \"%a ==@ %%%a. @[%a@]\"@]@\n" 
+	idents id 
+	(print_list space print_binder) bl
+	print_term e 
+    ) else (
+      fprintf fmt
+	"@[<hov 2>(*Why function*) definition %a :: @[\"[_] => %a\"@]@]@\n" 
+	idents id 
+	print_pure_type t;
+      fprintf fmt
+	"@[<hov 8>    where \"%a ==@ %%_. @[%a@]\"@]@\n" 
+	idents id 
+	print_term e 
+     )
+    
 
 let print_function fmt id p = reprint_function fmt id p
 
@@ -368,7 +382,7 @@
     | l -> fprintf fmt "(%a) " (print_list comma one) l
 
 let reprint_type fmt id vl =
-  fprintf fmt "@[<hov 2>(*Why type*) typedecl %a%a;@]@\n"
+  fprintf fmt "@[<hov 2>(*Why type*) typedecl %a%a@]@\n"
     type_parameters vl idents id
 
 let print_type fmt id vl = reprint_type fmt id vl
@@ -393,7 +407,7 @@
 
 let reprint_alg_type fmt ls =
   let andsep fmt () = fprintf fmt "@\n and " in
-  fprintf fmt "@[(*Why type*) datatype %a;@]@\n"
+  fprintf fmt "@[(*Why type*) datatype %a@]@\n"
     (print_list andsep reprint_alg_type_single) ls
 
 let print_alg_type fmt ls = reprint_alg_type fmt ls
@@ -497,11 +511,11 @@
   Gen.add_regexp
     "(\\*Why type\\*) datatype[ ]+(.*)[ ]+\\([^ ]*\\) =" Ty;
   Gen.add_regexp 
-    "(\\*Why type\\*) typedecl[ ]+\\([^ ]*\\);" Ty;
+    "(\\*Why type\\*) typedecl[ ]+\\([^ ]*\\)" Ty;
   Gen.add_regexp 
-    "(\\*Why type\\*) typedecl[ ]+[^ ]*[ ]+\\([^ ]*\\);" Ty;
+    "(\\*Why type\\*) typedecl[ ]+[^ ]*[ ]+\\([^ ]*\\)" Ty;
   Gen.add_regexp 
-    "(\\*Why type\\*) typedecl[ ]+(.*)[ ]+\\([^ ]*\\);" Ty
+    "(\\*Why type\\*) typedecl[ ]+(.*)[ ]+\\([^ ]*\\)" Ty
 
 let output_file fwe =
   let f = fwe ^ "_why.thy" in
diff -ru why-2.31/src/options.ml why-2.31-patched/src/options.ml
--- why-2.31/src/options.ml	2012-07-20 03:33:10.000000000 +0900
+++ why-2.31-patched/src/options.ml	2013-01-29 09:56:54.909607437 +0900
@@ -47,7 +47,7 @@
 let coq_use_dp = ref true
 let pvs_preamble_ = ref None
 let mizar_environ_ = ref None
-let isabelle_base_theory_ = ref "Main"
+let isabelle_base_theory_ = ref "Main Real"
 let no_simplify_prelude_ = ref false
 let simplify_triggers_ = ref false
 let no_cvcl_prelude_ = ref false
Only in why-2.31-patched/tools: simplify_parser.output
Only in why-2.31-patched/tools: toolstat_pars.output
